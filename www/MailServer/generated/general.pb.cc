// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: general.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "general.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Sign_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sign_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mail_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_general_2eproto() {
  protobuf_AddDesc_general_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "general.proto");
  GOOGLE_CHECK(file != NULL);
  Sign_descriptor_ = file->message_type(0);
  static const int Sign_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sign, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sign, signtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sign, date_),
  };
  Sign_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sign_descriptor_,
      Sign::default_instance_,
      Sign_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sign, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sign, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sign));
  Mail_descriptor_ = file->message_type(1);
  static const int Mail_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, attach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, hasattach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, getattach_),
  };
  Mail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mail_descriptor_,
      Mail::default_instance_,
      Mail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mail));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_general_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sign_descriptor_, &Sign::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mail_descriptor_, &Mail::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_general_2eproto() {
  delete Sign::default_instance_;
  delete Sign_reflection_;
  delete Mail::default_instance_;
  delete Mail_reflection_;
}

void protobuf_AddDesc_general_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rgeneral.proto\"6\n\004Sign\022\016\n\006userid\030\001 \001(\003\022"
    "\020\n\010signtype\030\002 \001(\005\022\014\n\004date\030\003 \001(\t\"z\n\004Mail\022"
    "\016\n\006userid\030\001 \003(\003\022\014\n\004type\030\002 \001(\005\022\r\n\005title\030\003"
    " \001(\t\022\017\n\007context\030\004 \001(\t\022\016\n\006attach\030\005 \001(\t\022\021\n"
    "\thasattach\030\006 \001(\005\022\021\n\tgetattach\030\007 \001(\005", 195);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "general.proto", &protobuf_RegisterTypes);
  Sign::default_instance_ = new Sign();
  Mail::default_instance_ = new Mail();
  Sign::default_instance_->InitAsDefaultInstance();
  Mail::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_general_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_general_2eproto {
  StaticDescriptorInitializer_general_2eproto() {
    protobuf_AddDesc_general_2eproto();
  }
} static_descriptor_initializer_general_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Sign::kUseridFieldNumber;
const int Sign::kSigntypeFieldNumber;
const int Sign::kDateFieldNumber;
#endif  // !_MSC_VER

Sign::Sign()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sign::InitAsDefaultInstance() {
}

Sign::Sign(const Sign& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sign::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(0);
  signtype_ = 0;
  date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sign::~Sign() {
  SharedDtor();
}

void Sign::SharedDtor() {
  if (date_ != &::google::protobuf::internal::kEmptyString) {
    delete date_;
  }
  if (this != default_instance_) {
  }
}

void Sign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sign::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sign_descriptor_;
}

const Sign& Sign::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_general_2eproto();
  return *default_instance_;
}

Sign* Sign::default_instance_ = NULL;

Sign* Sign::New() const {
  return new Sign;
}

void Sign::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_LONGLONG(0);
    signtype_ = 0;
    if (has_date()) {
      if (date_ != &::google::protobuf::internal::kEmptyString) {
        date_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_signtype;
        break;
      }

      // optional int32 signtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signtype_)));
          set_has_signtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_date;
        break;
      }

      // optional string date = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }

  // optional int32 signtype = 2;
  if (has_signtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->signtype(), output);
  }

  // optional string date = 3;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sign::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }

  // optional int32 signtype = 2;
  if (has_signtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->signtype(), target);
  }

  // optional string date = 3;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sign::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }

    // optional int32 signtype = 2;
    if (has_signtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signtype());
    }

    // optional string date = 3;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sign::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sign* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sign*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sign::MergeFrom(const Sign& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_signtype()) {
      set_signtype(from.signtype());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sign::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sign::CopyFrom(const Sign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sign::IsInitialized() const {

  return true;
}

void Sign::Swap(Sign* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(signtype_, other->signtype_);
    std::swap(date_, other->date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sign::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sign_descriptor_;
  metadata.reflection = Sign_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mail::kUseridFieldNumber;
const int Mail::kTypeFieldNumber;
const int Mail::kTitleFieldNumber;
const int Mail::kContextFieldNumber;
const int Mail::kAttachFieldNumber;
const int Mail::kHasattachFieldNumber;
const int Mail::kGetattachFieldNumber;
#endif  // !_MSC_VER

Mail::Mail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mail::InitAsDefaultInstance() {
}

Mail::Mail(const Mail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mail::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  context_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attach_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hasattach_ = 0;
  getattach_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mail::~Mail() {
  SharedDtor();
}

void Mail::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (context_ != &::google::protobuf::internal::kEmptyString) {
    delete context_;
  }
  if (attach_ != &::google::protobuf::internal::kEmptyString) {
    delete attach_;
  }
  if (this != default_instance_) {
  }
}

void Mail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mail_descriptor_;
}

const Mail& Mail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_general_2eproto();
  return *default_instance_;
}

Mail* Mail::default_instance_ = NULL;

Mail* Mail::New() const {
  return new Mail;
}

void Mail::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    type_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_context()) {
      if (context_ != &::google::protobuf::internal::kEmptyString) {
        context_->clear();
      }
    }
    if (has_attach()) {
      if (attach_ != &::google::protobuf::internal::kEmptyString) {
        attach_->clear();
      }
    }
    hasattach_ = 0;
    getattach_ = 0;
  }
  userid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_userid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_userid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_userid;
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_context;
        break;
      }

      // optional string context = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_context()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->context().data(), this->context().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attach;
        break;
      }

      // optional string attach = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attach:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attach()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attach().data(), this->attach().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hasattach;
        break;
      }

      // optional int32 hasattach = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasattach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hasattach_)));
          set_has_hasattach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_getattach;
        break;
      }

      // optional int32 getattach = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getattach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getattach_)));
          set_has_getattach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 userid = 1;
  for (int i = 0; i < this->userid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->userid(i), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }

  // optional string context = 4;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->context(), output);
  }

  // optional string attach = 5;
  if (has_attach()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attach().data(), this->attach().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->attach(), output);
  }

  // optional int32 hasattach = 6;
  if (has_hasattach()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hasattach(), output);
  }

  // optional int32 getattach = 7;
  if (has_getattach()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->getattach(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 userid = 1;
  for (int i = 0; i < this->userid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->userid(i), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string context = 4;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->context(), target);
  }

  // optional string attach = 5;
  if (has_attach()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attach().data(), this->attach().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->attach(), target);
  }

  // optional int32 hasattach = 6;
  if (has_hasattach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hasattach(), target);
  }

  // optional int32 getattach = 7;
  if (has_getattach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->getattach(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string context = 4;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->context());
    }

    // optional string attach = 5;
    if (has_attach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attach());
    }

    // optional int32 hasattach = 6;
    if (has_hasattach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hasattach());
    }

    // optional int32 getattach = 7;
    if (has_getattach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getattach());
    }

  }
  // repeated int64 userid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->userid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->userid(i));
    }
    total_size += 1 * this->userid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mail::MergeFrom(const Mail& from) {
  GOOGLE_CHECK_NE(&from, this);
  userid_.MergeFrom(from.userid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_context()) {
      set_context(from.context());
    }
    if (from.has_attach()) {
      set_attach(from.attach());
    }
    if (from.has_hasattach()) {
      set_hasattach(from.hasattach());
    }
    if (from.has_getattach()) {
      set_getattach(from.getattach());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mail::CopyFrom(const Mail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mail::IsInitialized() const {

  return true;
}

void Mail::Swap(Mail* other) {
  if (other != this) {
    userid_.Swap(&other->userid_);
    std::swap(type_, other->type_);
    std::swap(title_, other->title_);
    std::swap(context_, other->context_);
    std::swap(attach_, other->attach_);
    std::swap(hasattach_, other->hasattach_);
    std::swap(getattach_, other->getattach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mail_descriptor_;
  metadata.reflection = Mail_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
